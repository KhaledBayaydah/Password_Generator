/* This program generates a password of a length that the user chooses. It generates random choices of password that teh user can choose from
* @Khaled AlBayaydah
* @June 30th, 2019
*/
import java.util.*;
public class Password{
// the main method used to run the program
public static void main(String arg[]){
    boolean repeat=true;// a boolean value to repeat the process all over if the user wishes to do so.
// This while loop is used to repeat the process of teh generator all over if teh user enters any number(but2) at the end.
    while (repeat==true){
// Scanning the length of the characters in the password from the user.
    Scanner scan = new Scanner(System.in);
    System.out.println("Let's randomly generate a strong password that you can use.\nEnter the length of the password's characters:");
    int length = scan.nextInt(); 
// Scanning the number of paasword that the user would like to choose from.
    Scanner scan1 = new Scanner(System.in);
    System.out.println("Enter how many passwords you want to generate:");
    int number_choices = scan1.nextInt();
//This while loop is made to generate as many passwords as the user requested.
    int count=0;
    while (count<number_choices){
// This prints the final result (the password),
    String result = password_generator(length);
    System.out.println(result);
    count++;}
// if statement to remind the user that the password he's generated is weak and to recommend that he generates a stronger one.
    if (length<4)System.out.println("That's a weak password. I recommend that you generate passwords of more characters.");
// Scanning '2' if teh user likes to quit or any other number if teh user wants to generate more passwords.
    Scanner scan2 = new Scanner(System.in);
    System.out.println("Press 2 if you want to quit.\nPress any other number if you want to get other passwords.");
    int answer = scan2.nextInt();
// if/else statement to change the value of the boolean variable to repeat the process or quit.
    if (answer==1) repeat=true;
    else if (answer==2) repeat=false;
}
}
// This method returns teh password itself.
public static String password_generator(int length){
    String pass="";//an empty String variable to make it available for being saved with different values one at a time.
    String[] lowercase = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
    for(int i =0; i < length-3; i++){
    pass=Random_order(pass,characters(lowercase));}//saves pass as random lowercase letters with the l(ength-3)
    String[] uppercase = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    pass = Random_order(pass,characters(uppercase));//adds a capital letter to the password with a random order
    String[] symbols = {"!","@","#","%","&","*","/","+","-","^","?"};
    pass=Random_order(pass,characters(symbols));//adds a symbol to the password with a random order
    String[] numbers = {"0","1","2","3","4","5","6","7","8","9"};
    pass=Random_order(pass,characters(numbers));//adds a number from 0-9 to the password with a random order
    return pass;//returns the complete password.
}
// This method is responsible for makeing the order of the password's caracters as random as possible.
public static String Random_order(String pass, String characters){
    String[] Random_order = {pass + characters,characters + pass} ;//exchanges the order to choose one of the two randomly
    int length = Random_order.length;
    int rnd = (int) (length*Math.random());
    return Random_order[rnd];// returns the value of the random order
}
// This method picks up random characters from a specific set of uppercase letters, lowercase letter, symbols, or numbers
public static String characters(String[] cha){
    int length = cha.length;
    int rnd = (int) (length * Math.random());
    return cha[rnd];// returns a random value of a character.    
}
}
